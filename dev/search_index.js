var documenterSearchIndex = {"docs":
[{"location":"library/#Reference-1","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"library/#PSF-Models-1","page":"Reference","title":"PSF Models","text":"","category":"section"},{"location":"library/#","page":"Reference","title":"Reference","text":"PointSpreadFunctions.AbstractPSF\nAiryPSF\nCauchyPSF\nGaussianPSF\nMoffatPSF","category":"page"},{"location":"library/#PointSpreadFunctions.AbstractPSF","page":"Reference","title":"PointSpreadFunctions.AbstractPSF","text":"Instances of sub-types of PointSpreadFunctions.AbstractPSF{N} are used to store the parameters of various Point Spread Functions (PSF) models, N is the number of parameters.  Let P be such an instance, then:\n\nP([T,] r)\nP([T,] x, y)\n\nyield an approximation of the PSF at a distance r or at a position (x,y) relative to the position of the point source.\n\nUse index notation to retrieve the parameters as an N-tuple or a specific parameters:\n\nP[:]  # yields all parameters\nP[i]  # yields i-th parameter\n\nThe PSF is normalized such that its peak value (usually at the center) is equal to one.  The rationale is that normalization by the peak value does not depend on the dimensionality while the integral of the PSF does depend on the dimensionality.\n\nSee also AiryPSF, CauchyPSF, GaussianPSF, MoffatPSF.\n\n\n\n\n\n","category":"type"},{"location":"library/#PointSpreadFunctions.AiryPSF","page":"Reference","title":"PointSpreadFunctions.AiryPSF","text":"P = AiryPSF(lim [, eps=0])\n\ndefines the Point Spread Function (PSF) P of a circular pupil. Argument lim is the distance in the focal plane corresponding to the diffraction limit.  Assuming the distance is given in angular units (radians), lim = λ/D with λ the wavelength and D the pupil diameter (both expressed in the same units).  Optional argument eps is the ratio of the size of the central obscuration to that of the pupil (necessarily 0 ≤ eps < 1).  If not specified, eps = 0 is assumed (unobstructed pupil). Then:\n\nP([T,] r)\nP([T,] x, y)\n\nyield the PSF at distance r or position (x,y) relative to the position of the source and normalized so that the peak value of the PSF is one.  Optional argument T is the floating-point type of the result.  Arguments lim, r, x and y are in the same units.\n\nSee also CauchyPSF, GaussianPSF, MoffatPSF.\n\n\n\n\n\n","category":"type"},{"location":"library/#PointSpreadFunctions.CauchyPSF","page":"Reference","title":"PointSpreadFunctions.CauchyPSF","text":"P = CauchyPSF(fwhm)\n\ndefines a Cauchy Point Spread Function (PSF) P (or Lorentzian) of full width at half maximum fwhm which can be used as:\n\nP([T,] r)\nP([T,] x, y)\n\nto compute the PSF at distance r or position (x,y) relative to the position of the source and normalized so that the peak value of the PSF is one.  Optional argument T is the floating-point type of the result. Arguments fwhm, r, x and y are in the same units.\n\nSee also AiryPSF, GaussianPSF, MoffatPSF.\n\n\n\n\n\n","category":"type"},{"location":"library/#PointSpreadFunctions.GaussianPSF","page":"Reference","title":"PointSpreadFunctions.GaussianPSF","text":"P = GaussianPSF(fwhm)\n\ndefines a Gaussian Point Spread Function (PSF) P of full width at half maximum fwhm which can be used as:\n\nP([T,] r)\nP([T,] x, y)\n\nto compute the PSF at distance r or position (x,y) relative to the position of the source and normalized so that the peak value of the PSF is one.  Optional argument T is the floating-point type of the result. Arguments fwhm, r, x and y are in the same units.\n\nSee also AiryPSF, CauchyPSF, MoffatPSF.\n\n\n\n\n\n","category":"type"},{"location":"library/#PointSpreadFunctions.MoffatPSF","page":"Reference","title":"PointSpreadFunctions.MoffatPSF","text":"P = MoffatPSF(fwhm, beta)\n\ndefines a Moffat PSF P of full width at half maximum fwhm and exponent beta which can be used as:\n\nP([T,] r)\nP([T,] x, y)\n\nto compute the PSF at distance r or position (x,y) relative to the position of the source and normalized so that the peak value of the PSF is one.  Optional argument T is the floating-point type of the result. Arguments fwhm, r, x and y are in the same units.\n\nSee also AiryPSF, CauchyPSF, GaussianPSF.\n\n\n\n\n\n","category":"type"},{"location":"library/#Methods-1","page":"Reference","title":"Methods","text":"","category":"section"},{"location":"library/#","page":"Reference","title":"Reference","text":"getfwhm\nfindzeros\nPointSpreadFunctions.fit\nisvalid(::PointSpreadFunctions.AbstractPSF)\ncheck_structure(::PointSpreadFunctions.AbstractPSF)","category":"page"},{"location":"library/#PointSpreadFunctions.getfwhm","page":"Reference","title":"PointSpreadFunctions.getfwhm","text":"getfwhm(P)\n\nyields the full width at half maximum (FWHM) of point spread function P. Computing the result may require some calculations, so it is better to save the result if this value must be used several times.\n\n\n\n\n\n","category":"function"},{"location":"library/#PointSpreadFunctions.findzeros","page":"Reference","title":"PointSpreadFunctions.findzeros","text":"findzeros([T=Float64,] P, n; kwds...)\n\nyield the n-th zero of Point Spread Function (PSF) P.  If n is a vector of integers, a vector with the corresponding zeros is returned. For example:\n\nfindzeros(P, 1:3)\n\nyields the first 3 zeros of P.\n\nOptional argument T can be used to specify the floating-point type of the result.  The keywords of OptimPack.fzero can be specified.\n\n\n\n\n\n","category":"function"},{"location":"library/#PointSpreadFunctions.fit","page":"Reference","title":"PointSpreadFunctions.fit","text":"fit(psf, pos, [wgt,] dat[, roi]; nonnegative=false) -> psf′, pos′\n\nfits a given Point Spread Function (PSF) model on data dat with (optional) respective weights wgt.  Argument psf is a PSF instance to specify which PSF model to use and its initial parameters.  Argument pos is the initial PSF position.  The result is a 2-tuple with the fitted PSF model and position.\n\nThe fit is carried out by OptimPack.Powell.Newuoa.minimize method.  The initial parameters should be close enough to the solution for the fit to behave correctly.\n\nKeyword nonnegative indicates whether the intensity of the PSF should be nonnegative or not.  Keyword rho = (rhobeg,rhoend) may be used to specify the initial and final precision on the parameters.  Additional keywords may be specified and are passed to the minimizer.\n\nAn optional Region Of Interest (ROI) may be specified by argument roi as an N-tuple of index ranges or colons.  This is useful to limit the region used to perform the fit.  For example:\n\nfit(GaussianPSF(2.5), (23,12), dat, (10:30, :))\n\nwill fit a Gaussian PSF model on sub-array dat[10:30,:].  The advantages of specifying a ROI is that the relative position of the ROI is taken into account in the initial and final position and that a view is used instead of extracting a sub-array.  Specifying a ROI alos works for weighted data. Non-rectangular ROIs can be emulated by having weights equal to zero where data should be ignored.\n\n\n\n\n\n","category":"function"},{"location":"library/#Base.isvalid-Tuple{PointSpreadFunctions.AbstractPSF}","page":"Reference","title":"Base.isvalid","text":"isvalid(psf) -> bool\n\nyields whether the parameters of the point spread function psf are correct.  The check_structure method is similar but throws for invalid parameters.\n\n\n\n\n\n","category":"method"},{"location":"#PointSpreadFunctions.jl-1","page":"Home","title":"PointSpreadFunctions.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"PointSpreadFunctions is a Julia package for modeling and fitting Point Spread Functions (PSF).","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Source code is on GitHub.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The following types and methods are provided by PointSpreadFunctions:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"}]
}
